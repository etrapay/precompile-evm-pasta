// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package pallas

import (
	"math/big"
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
var (
	tests = map[string]testutils.PrecompileTest{
		"insufficient gas for affineAdd should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := AffineAddInput{}
				input, err := PackAffineAdd(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: AffineAddGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for affineGenerator should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				input, err := PackAffineGenerator()
				require.NoError(t, err)
				return input
			},
			SuppliedGas: AffineGeneratorGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for doubleAffine should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasAffinePoint
				input, err := PackDoubleAffine(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: DoubleAffineGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for doubleProjective should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasProjectivePoint
				input, err := PackDoubleProjective(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: DoubleProjectiveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for fromLeBytesModOrder should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput []byte
				input, err := PackFromLeBytesModOrder(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: FromLeBytesModOrderGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for inverseMod should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := InverseModInput{
					Fr: big.NewInt(10),
					M:  big.NewInt(1),
				}
				input, err := PackInverseMod(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: InverseModGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for isInfinityAffine should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasAffinePoint
				testInput.X = big.NewInt(1)
				testInput.Y = big.NewInt(1)
				input, err := PackIsInfinityAffine(testInput)

				require.NoError(t, err)
				return input
			},
			SuppliedGas: IsInfinityAffineGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for isInfinityProjective should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasProjectivePoint
				testInput.X = big.NewInt(1)
				testInput.Y = big.NewInt(1)
				testInput.Z = big.NewInt(1)
				input, err := PackIsInfinityProjective(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: IsInfinityProjectiveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for isOnCurve should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasAffinePoint
				input, err := PackIsOnCurve(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: IsOnCurveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for mulWithScalarAffine should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := MulWithScalarAffineInput{}
				input, err := PackMulWithScalarAffine(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: MulWithScalarAffineGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for mulWithScalarProjective should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := MulWithScalarProjectiveInput{}
				input, err := PackMulWithScalarProjective(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: MulWithScalarProjectiveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for negateAffine should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasAffinePoint
				input, err := PackNegateAffine(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: NegateAffineGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for negateProjective should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasProjectivePoint
				input, err := PackNegateProjective(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: NegateProjectiveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for negateScalar should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput *big.Int
				input, err := PackNegateScalar(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: NegateScalarGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for powSmall should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := PowSmallInput{}
				input, err := PackPowSmall(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: PowSmallGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for projectiveAdd should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ProjectiveAddInput{}
				input, err := PackProjectiveAdd(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ProjectiveAddGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for projectiveGenerator should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				input, err := PackProjectiveGenerator()
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ProjectiveGeneratorGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for toAffine should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasProjectivePoint
				input, err := PackToAffine(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ToAffineGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for toProjective should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput IPallasAffinePoint
				testInput.X = big.NewInt(1)
				testInput.Y = big.NewInt(1)

				input, err := PackToProjective(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ToProjectiveGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for validateScalarField should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput *big.Int
				input, err := PackValidateScalarField(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ValidateScalarFieldGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
	}
)

// TestPallasRun tests the Run function of the precompile contract.
func TestPallasRun(t *testing.T) {
	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			test.Run(t, Module, state.NewTestStateDB(t))
		})
	}
}

// func BenchmarkPallas(b *testing.B) {
// 	// Benchmark tests.
// 	for name, test := range tests {
// 		b.Run(name, func(b *testing.B) {
// 			test.Bench(b, module, newStateDB(b))
// 		})
// 	}
// }
